
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function signedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Use custom claims for admin role. This is required for collectionGroup queries.
      return signedIn() && request.auth.token.admin == true;
    }

    // USERS (doc id = auth.uid). Users read their own doc; admin can do anything.
    match /users/{uid} {
      allow get: if signedIn() && (request.auth.uid == uid || isAdmin());
      allow list, delete, create: if isAdmin();
      allow update: if request.auth.uid == uid;
    }

    // PROJECTS: readable by any signed-in user; only admins write.
    match /projects/{projectId} {
      allow list, get: if signedIn();
      allow write: if isAdmin();
    }

    // TASKS: anyone signed in can read; only admins create/delete;
    // user can update the status of a task assigned to them.
    match /tasks/{taskId} {
      allow get, list: if signedIn();
      allow create, delete: if isAdmin();
      
      // An admin can update any field.
      // A user can only update the status of a task assigned to them.
      allow update: if isAdmin() || (
        signedIn() && 
        resource.data.assignedTo == request.auth.token.email &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
      );
    }

    // USER SESSIONS nested under the user
    match /users/{uid}/sessions/{sessionId} {
      // An admin can read/list any session.
      allow get, list: if isAdmin();
      // A user can read/list/create their own sessions.
      allow read, list, create: if signedIn() && request.auth.uid == uid;
    }

    // VERIFICATION LOGS nested under user
    match /users/{uid}/verificationLog/{logId} {
       // An admin can read/list any log.
      allow get, list: if isAdmin();
      // A user can create and read their own logs.
      allow create, read, list: if signedIn() && request.auth.uid == uid;
    }
  }
}
