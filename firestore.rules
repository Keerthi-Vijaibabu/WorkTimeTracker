rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is an admin by looking at their role in the 'users' collection.
      return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.role == 'admin';
    }

    // Users can only read their own data. Admins can read and write all user data.
    match /users/{userId} {
      allow read: if request.auth.uid != null && request.auth.token.email == userId || isAdmin();
      allow list: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Projects are readable by any authenticated user, but only admins can create/update/delete.
    match /projects/{projectId} {
      allow read, list: if request.auth.uid != null;
      allow write: if isAdmin();
    }

    // Tasks are readable by any authenticated user. Admins can write to all tasks.
    // Non-admins can only update tasks assigned to them.
    match /tasks/{taskId} {
      allow read, list: if request.auth.uid != null;
      allow write: if isAdmin() || request.resource.data.assignedTo == request.auth.token.email;
    }
    
    // Users can read/write their own sessions. Admins can read all sessions.
    match /userSessions/{sessionId} {
      allow read, list: if request.auth.uid != null && resource.data.userEmail == request.auth.token.email || isAdmin();
      allow create: if request.auth.uid != null && request.resource.data.userEmail == request.auth.token.email;
    }
    
    // Users can write to the verification log. Admins can read all logs.
    match /verificationLog/{logId} {
      allow read, list: if request.auth.uid != null && resource.data.userEmail == request.auth.token.email || isAdmin();
      allow create: if request.auth.uid != null && request.resource.data.userEmail == request.auth.token.email;
    }
  }
}
