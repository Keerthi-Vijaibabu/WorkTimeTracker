rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Users can read their own user document.
    // Admins can read and list all user documents.
    match /users/{userId} {
      allow read: if request.auth.uid != null && (request.auth.token.email == userId || isAdmin(request.auth.token.email));
      allow list: if request.auth.uid != null && isAdmin(request.auth.token.email);
      // Users can be created during signup.
      allow create: if request.auth.uid != null;
      // Admins can update any user's role.
      allow update: if request.auth.uid != null && isAdmin(request.auth.token.email);
      // Prevent users from deleting their accounts through the client
      allow delete: if false;
    }

    // Projects can be read by any authenticated user.
    // Only admins can create, update, or delete projects.
    match /projects/{projectId} {
      allow read, list: if request.auth.uid != null;
      allow write: if request.auth.uid != null && isAdmin(request.auth.token.email);
    }
    
    // Tasks can be read by any authenticated user.
    // Only admins can create new tasks.
    // Any authenticated user can update a task (e.g., to change its status).
    match /tasks/{taskId} {
        allow read, list: if request.auth.uid != null;
        allow create: if request.auth.uid != null && isAdmin(request.auth.token.email);
        allow update: if request.auth.uid != null;
        allow delete: if request.auth.uid != null && isAdmin(request.auth.token.email);
    }

    // Users can create their own sessions.
    // Users can read their own sessions.
    // Admins can read and list all sessions.
    match /userSessions/{sessionId} {
      allow create: if request.auth.uid != null && request.resource.data.userEmail == request.auth.token.email;
      allow read, list: if request.auth.uid != null && (request.resource.data.userEmail == request.auth.token.email || isAdmin(request.auth.token.email));
      allow write: if request.auth.uid != null && request.resource.data.userEmail == request.auth.token.email;
    }
    
    // Users can create their own verification logs.
    // Users can read their own verification logs.
    // Admins can read and list all verification logs.
    match /verificationLog/{logId} {
      allow create: if request.auth.uid != null && request.resource.data.userEmail == request.auth.token.email;
      allow read, list: if request.auth.uid != null && (request.resource.data.userEmail == request.auth.token.email || isAdmin(request.auth.token.email));
    }
  }
}
